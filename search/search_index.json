{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Constellation Developer Documentation","text":"<p>Warning</p> <p>This documentation is not intended for regular users. If you need help setting up a product, please refer to product documentation. If you still want to continue, please be aware that you need to be familiar with the basics of the Luau language. We do not provide support for custom-built solutions.</p>"},{"location":"contributing/","title":"Contributing to this documentation:","text":"<p>We are open for contributions! If you find any errors, areas for improvement, or have suggestions for new sections, feel free to contribute by making a pull request.</p>"},{"location":"tungsten/introduction/","title":"Introduction to Tungsten Development","text":"<p>Info</p> <p>Contents of this section applies to Tungsten version 1.1. That means it might not work with other versions of the checkouts.</p>"},{"location":"tungsten/receiptprinter/","title":"Receipt Printer in Tungsten Self-Checkouts","text":"<p>Receipt printer support in tungsten allows easy printing with error handling through the Built-in Printer API.</p>"},{"location":"tungsten/receiptprinter/#purposes-of-receipt-printer","title":"Purposes of receipt printer","text":"<ul> <li>Saving and keeping track of the transaction data</li> <li>Printing receipts, reports and staff log-in barcodes</li> <li>Handle error reporting: Detect and report printer errors (e.g., paper jams or low paper)</li> </ul>"},{"location":"tungsten/receiptprinter/#example-receipt-printer-code","title":"Example receipt printer code","text":"<pre><code>local status = {\n    paper = \"ok\" -- ok, warning, fault\n}\n\nscript.Parent.Parent.InternalCommunication.OnInvoke = function(device, request, data)\n    if device == \"ReceiptPrinter\" then\n        if request == \"GetStatus\" then\n            return {[\"success\"] = true, [\"error\"] = \"\", [\"requires_intervention\"] = false, [\"response\"] = status}\n        elseif request == \"PrintDocument\" then\n            --[[\n                in this case, data is an array of rows to print\n                e.g.:\n                {\n                    {[\"l\"] = \"\", [\"c\"] = \"Store\", [\"r\"] = \"\", isSeparator = false, lineSize = 14},\n                    {[\"l\"] = \"\", [\"c\"] = \"St. Street 1\", [\"r\"] = \"\", isSeparator = false, lineSize = 14},\n                    {[\"l\"] = \"\", [\"c\"] = \"Receipt\", [\"r\"] = \"\", isSeparator = false, lineSize = 20},\n                    {[\"l\"] = \"\", [\"c\"] = \"\", [\"r\"] = \"\", isSeparator = true, lineSize = 14},\n                    {[\"l\"] = \"Apple 1 x 0.59\", [\"c\"] = \"\", [\"r\"] = \"0.59\", isSeparator = false, lineSize = 14},\n                    ...\n                }\n            ]]\n\n            if status.paper == \"fault\" then\n               return {\n                    [\"success\"] = false, \n                    [\"error\"] = \"Receipt empty\",\n                    [\"requires_intervention\"] = true,\n                    [\"response\"] = {\n                        [\"generalized_instructions_data\"] = {\n                            [\"error_description\"] = `Receipt empty. Open printer, replace paper roll and press \"continue\".`,\n                            [\"status_value\"] = {\"paper\", \"open_cover\"},\n                            [\"expected_value\"] = {[\"paper\"] = {\"ok\", \"warning\"}, [\"open_cover\"] = {\"ok\"}}\n                        }\n                    }\n                }\n                -- If requires_intervention is true, the checkout will keep checking the status  \n                -- until the issue is resolved (status changes to \"ok\" or \"warning\").\n            end\n\n            return {[\"success\"] = true, [\"error\"] = \"\", [\"requires_intervention\"] = false, [\"response\"] = {}}\n        end\n        return {\n            [\"success\"] = false, \n            [\"error\"] = \"unknown request\",\n            [\"requires_intervention\"] = false,\n            [\"response\"] = {}\n        }\n    end\nend\n\n</code></pre> <p>Warning</p> <p>The checkout will remain in intervention mode until the printer reports \"ok\" or \"warning\" for each value. Responding with any other status will prevent the system from proceeding. Additionally, when requesting printer status, if any field in the returned status table has a value of \"fault\" or an unrecognized value (i.e., not \"ok\" or \"warning\"), the system will require an intervention, even if <code>requiresIntervention</code> is set to false</p> <p>Info</p> <p>If any field in the status table has the value \"warning\", the trilight on the device will flash green, indicating a device warning state. Additionally, the checkout status in RAP will show \"Low media\".  </p>"},{"location":"tungsten/receiptprinter/#explanation","title":"Explanation","text":"<ol> <li> <p>Printer status handling</p> <ul> <li> <p>The <code>status</code> table keeps track of various printer states (e.g., <code>paper</code>, <code>toner</code>, <code>cover</code>).</p> </li> <li> <p>Each <code>status</code> field can have values such as <code>ok</code>, <code>warning</code>, or <code>fault</code>.</p> </li> <li> <p>The <code>GetStatus</code> request returns the current printer status.</p> </li> <li> <p>If any status field is <code>fault</code>, the checkout system enters intervention mode until the issue is resolved.</p> </li> </ul> </li> <li> <p>Printing Documents</p> <ul> <li> <p>The <code>PrintDocument</code> request processes an array of receipt lines.</p> </li> <li> <p>Each line object contains:</p> <ul> <li> <p><code>l</code>: Left-aligned text</p> </li> <li> <p><code>c</code>: Center-aligned text</p> </li> <li> <p><code>r</code>: Right-aligned text</p> </li> </ul> </li> <li> <p><code>isSeparator</code>: Boolean indicating whether the line is a separator</p> </li> <li> <p><code>lineSize</code>: Font size of the line</p> </li> <li> <p>If any field in status is <code>fault</code>, an error response is returned requiring intervention.</p> </li> </ul> </li> </ol>"},{"location":"tungsten/receiptprinter/#error-handling-system-behavior","title":"Error Handling &amp; System Behavior","text":"<ul> <li> <p>The system remains in intervention mode if any printer status field is <code>fault</code>.</p> </li> <li> <p>Status fields may include <code>paper</code>, <code>toner</code>, etc.</p> </li> <li> <p>If any field in the status table contains <code>warning</code>, the device\u2019s trilight will flash green, signaling a media warning state.</p> </li> <li> <p>The checkout status in RAP (Remote Attendant Program) will display corresponding messages (e.g., \"Low media\").</p> </li> <li> <p>A <code>requires_intervention = true</code> response means the system will keep checking the status until resolved.</p> </li> <li> <p>The intervention prompt provides guidance for refilling the paper, replacing toner, or resolving other errors.</p> </li> </ul>"},{"location":"tungsten/receiptprinter/#sending-intervention-with-instructions","title":"Sending intervention with instructions","text":"<p>To notify the system that a printer issue requires manual intervention, return a structured response with detailed instructions. Below is an example of handling a paper jam intervention:</p>"},{"location":"tungsten/receiptprinter/#detailed-instructions","title":"Detailed instructions","text":"<pre><code>return {\n        [\"success\"] = false, \n        [\"error\"] = \"Empty paper\",\n        [\"requires_intervention\"] = true,\n        [\"response\"] = {\n            [\"detailed_instructions_data\"] = {\n                [\"images\"] = {\n                    [1] = \"rbxassetid://\",\n                    [2] = \"rbxassetid://\",\n                    [3] = \"rbxassetid://\",\n                    [4] = \"rbxassetid://\",\n                },\n                [\"error_description\"] = \"Receipt empty\",\n                [\"error_code\"] = \"PTRSTAT_REC_EMPTY - 0x00000002\",\n                [\"error_solution\"] = [[\n                    1. Unpack the receipt paper.\n                    2. Unlock and open the upper cabinet door.\n                    3. Click the receipt printer to remove any \n                    excess thermal paper and load a new roll.\n                    4. The printer automatically presents and\n                    cuts a receipt. A test smiley face should display \n                    on the receipt. A \u201csmiley face\u201d prints on the\n                    test receipt to indicate that the thermal coating \n                    is on the side where the thermal print head \n                    is located. When the smiley face prints, the\n                    paper is loaded correctly.\n                    5. Close and lock the upper cabinet door.\n                ]],\n                [\"status_value\"] = {\"paper\", \"open_cover\"},\n                [\"expected_value\"] = {[\"paper\"] = {\"ok\", \"warning\"}, [\"open_cover\"] = {\"ok\"}}\n            }\n        }\n    }\n</code></pre>"},{"location":"tungsten/receiptprinter/#detailed-response-breakdown","title":"Detailed response breakdown","text":"<ul> <li> <p><code>success = false</code>: Indicates the request failed due to an error.</p> </li> <li> <p><code>error</code>: Describes the issue (e.g., \"Paper jam\").</p> </li> <li> <p><code>requires_intervention = true</code>: Forces the system into intervention mode.</p> </li> <li> <p><code>detailed_instructions_data</code>:</p> <p><code>images</code>: List of asset IDs for instructional images (must be exactly 4 or none).</p> <p><code>error_description</code>: A short explanation of the problem.</p> <p><code>error_code</code>: A unique identifier for the error.</p> <p><code>error_solution</code>: Step-by-step instructions to resolve the issue.</p> <p><code>status_value</code>: The current faulty status in the status table.</p> <p><code>expected_value</code>: The status value that will indicate the issue is resolved.</p> </li> </ul>"},{"location":"tungsten/receiptprinter/#generalized-instructions","title":"Generalized instructions","text":"<pre><code>return {\n        [\"success\"] = false, \n        [\"error\"] = \"Paper jam\",\n        [\"requires_intervention\"] = true,\n        [\"response\"] = {\n            [\"generalized_instructions_data\"] = {\n                [\"error_description\"] = `Paper jam. Open printer, adjust paper and press \"continue\".`,\n                [\"status_value\"] = {\"paper_jam\", \"open_cover\"},\n                [\"expected_value\"] = {[\"paper_jam\"] = {\"ok\", \"warning\"}, [\"open_cover\"] = {\"ok\"}}\n            }\n        }\n    }\n</code></pre>"},{"location":"tungsten/receiptprinter/#generalized-response-breakdown","title":"Generalized response breakdown","text":"<ul> <li> <p><code>success = false</code>: This indicates that the request has failed due to an error.</p> </li> <li> <p><code>error = \"Paper jam\"</code>: This string describes the specific issue the system is encountering, in this case, a \"Paper jam\".</p> </li> <li> <p><code>requires_intervention = true</code>: This flag signals that the system needs manual intervention to resolve the issue.</p> </li> <li> <p><code>generalized_instructions_data</code>: This is a container for the essential steps and data related to the error.</p> <p><code>error_description</code>: A concise explanation of the problem and the action needed to fix it.</p> <p><code>status_value</code>: This array lists the current faulty statuses that indicate the error and needs to be fixed.</p> <p><code>expected_value</code>: This defines the statuses that indicate successful resolution of the issue. After resolving the paper jam and closing the cover, the status values should reflect:</p> <ul> <li> <p><code>ok</code> or <code>warning</code> for the <code>paper_jam</code> status (indicating that the issue is cleared or acknowledged),</p> </li> <li> <p><code>ok</code> for the <code>open_cover</code> status (indicating that the cover is closed).</p> </li> </ul> </li> </ul>"},{"location":"tungsten/scanshop/","title":"Scan&amp;Shop in Tungsten Checkouts","text":"<p>Since version 1.03, Tungsten natively supports Scan&amp;Shop, which means it can process transaction data sent via BindableFunction, handle errors, and send a response.</p>"},{"location":"tungsten/scanshop/#sending-transaction-data-to-the-checkout","title":"Sending transaction data to the checkout","text":"<p>In this section, we will explain how to send transaction data to the Tungsten Self Checkout system using the Scan&amp;Shop feature. The example provided demonstrates how to structure the data for a typical transaction, including the items being purchased and related information.</p> <p>Example code:</p> <pre><code>workspace[\"SwiftRetail | Tungsten Self Checkout System\"].Event.Communication:Invoke(\"Scan&amp;Shop\", {\n    InterventionTitle = \"My Scan&amp;Shop\",\n    Manufacturer = \"Constellation\",\n    DesiredLane = 1,\n    Player = Player,\n    Items = {\n        [1] = {\n            ProductName = \"Beans\",\n            ProductPrice = 1.29,\n            ClubcardPrice = 1.19,\n            Units = 1,\n            AgeRestricted = false,\n            ImageID = nil,\n            ItemInstances = {BeansTool},\n        }\n    }\n})\n</code></pre>"},{"location":"tungsten/scanshop/#explanation","title":"Explanation","text":"<ol> <li> <p>InterventionTitle: This field specifies the header of the intervention displayed on the screen when the Scan&amp;Shop transaction is being processed. <code>string</code></p> </li> <li> <p>Manufacturer: This field is used to define the manufacturer of the checkout system. Here, it is set to \"Constellation\", indicating that the system is developed by Constellation. <code>string</code></p> </li> <li> <p>DesiredLane: This represents the specific checkout number where the transaction is going to be processed. For this example, the transaction will be processed in lane 1. <code>number</code></p> </li> <li> <p>Player: This refers to the player who is handling the transaction. <code>player</code></p> </li> <li> <p>Items: This field contains all the items being purchased in the transaction. Each item is represented by a table, and the fields inside the item table describe various properties of the product: <code>table</code></p> <ul> <li>ProductName: Required <code>string</code></li> <li>ProductPrice: Required <code>number</code></li> <li>ClubcardPrice: Optional <code>number</code></li> <li>Units: Required <code>number</code> </li> <li>AgeRestricted: Required <code>boolean</code> </li> <li>ImageID: Optional<code>string</code> </li> <li>ItemInstances: Required (Can contain multiple instances, may be empty) <code>table</code> </li> </ul> </li> </ol>"},{"location":"tungsten/scanshop/#handling-responses","title":"Handling responses","text":"<p>In this section we will describe how Tungsten checkout may respond to a Scan&amp;Shop request.</p>"},{"location":"tungsten/scanshop/#possible-responses","title":"Possible responses","text":"<ol> <li> <p><code>\"Error (Checkout not found)\"</code></p> <p>This means that the checkout with provided <code>DesiredLane</code> number cannot be found.</p> </li> <li> <p><code>\"Error (Checkout is busy)</code></p> <p>This response occurs when the system is currently busy and unable to process the transaction. </p> </li> <li> <p><code>\"Error (Checkout offline)\"</code></p> <p>This indicates that the checkout has been found but the system is offline and cannot process transactions.</p> </li> <li> <p><code>\"Error (Cannot start transaction)\"</code></p> <p>This occurs when the system cannot start the transaction.</p> </li> <li> <p><code>\"Error (Basket is empty)\"</code></p> <p>This response occurs when the system receives an empty item list (data.Items does not exist or is empty).</p> </li> <li> <p><code>\"Error (Error while transferring data to checkout)\"</code></p> <p>The system encountered an error while processing the items or sending data from Scan&amp;Shop to the checkout terminal. An error during data processing may result in intervention and cancellation of the entire transaction.</p> </li> <li> <p><code>\"Error (Timeout while communicating with checkout)\"</code></p> <p>The checkout did not respond to the sent request.</p> </li> <li> <p><code>true (boolean)</code></p> <p>Successfully transferred all transaction data to the checkout.</p> </li> </ol>"}]}